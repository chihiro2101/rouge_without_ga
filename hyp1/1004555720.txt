these resources include the execution engine , caches , and system bus interface ; the sharing of resources allows two logical processors to work with each other more efficiently , and allows a logical processor to borrow resources from a stalled logical core ( assuming both logical cores are associated with the same physical core ) the degree of benefit seen when using a hyper-threaded or multi core processor depends on the needs of the software , and how well it and the operating system are written to manage the processor efficiently this allows a hyper-threading processor to appear as the usual '' physical '' processor and an extra '' logical '' processor to the host operating system ( htt-unaware operating systems see two '' physical '' processors ) , allowing the operating system to schedule two threads or processes simultaneously and appropriately when execution resources would not be used by the current task in a processor without hyper-threading , and especially when the processor is stalled , a hyper-threading equipped processor can use those execution resources to execute another scheduled task the minimum that is required to take advantage of hyper-threading is symmetric multiprocessing ( smp ) support in the operating system , as the logical processors appear as standard separate processors if only two threads are eligible to run , it might choose to schedule those threads on the two logical processors that happen to belong to the same physical processor ; that processor would become extremely busy while the other would idle , leading to poorer performance than is possible by scheduling the threads onto different physical processors this problem can be avoided by improving the scheduler to treat logical processors differently from physical processors ; in a sense , this is a limited form of the scheduler changes that are required for numa systems it was also included on the 3.06 & nbsp ; ghz northwood-based pentium & nbsp ; 4 in the same year , and then remained as a feature in every pentium & nbsp ; 4 & nbsp ; ht , pentium & nbsp ; 4 extreme edition and pentium extreme edition processor since the p6 microarchitecture was used in earlier iterations of pentium processors , namely , the pentium pro , pentium & nbsp ; ii and pentium & nbsp ; iii ( plus their celeron & xeon derivatives at the time ) as a result , performance improvements are very application-dependent ; however , when running two programs that require full attention of the processor , it can actually seem like one or both of the programs slows down slightly when hyper-threading technology is turned on this is due to the replay system of the pentium & nbsp ; 4 tying up valuable execution resources , equalizing the processor resources between the two programs , which adds a varying amount of execution time in may 2005 , colin percival demonstrated that a malicious thread on a pentium & nbsp ; 4 can use a timing attack to monitor the memory access patterns of another thread with which it shares a cache , allowing the theft of cryptographic information potential solutions to this include the processor changing its cache eviction strategy or the operating system preventing the simultaneous execution , on the same physical core , of threads with different privileges 