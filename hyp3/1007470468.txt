the documentation for a design pattern describes the context in which the pattern is used , the forces within the context that the pattern seeks to resolve , and the suggested solution related observations were made by hannemann and kiczales who implemented several of the 23 design patterns using an aspect-oriented programming ( aspectj ) and showed that code-level dependencies were removed from the implementations of 17 of the 23 design patterns and that aspect-oriented programming could simplify the implementations of design patterns that same year , the first pattern languages of programming conference was held , and the following year the portland pattern repository was set up for documentation of design patterns it has been observed that design patterns may just be a sign that some features are missing in a given programming language ( java or c++ for instance ) notable books in the design pattern genre include : although design patterns have been applied practically for a long time , formalization of the concept of design patterns languished for several years these sections describe a design motif : a prototypical micro-architecture that developers copy and adapt to their particular designs to solve the recurrent problem described by the design pattern developers use the design pattern by introducing in their designs this prototypical micro-architecture , which means that micro-architectures in their designs will have structure and organization similar to the chosen design motif participants : a listing of the classes and objects used in the pattern and their roles in the design related patterns : other patterns that have some relationship with the pattern ; discussion of the differences between the pattern and similar patterns in order to achieve flexibility , design patterns usually introduce additional levels of indirection , which in some cases may complicate the resulting designs and hurt application performance abstraction principle algorithmic skeleton anti-pattern architectural pattern debugging patterns design pattern distributed design patterns double-chance function enterprise architecture framework grasp ( object-oriented design ) helper class interaction design pattern list of software development philosophies list of software engineering topics pattern language pattern theory pedagogical patterns portland pattern repository refactoring software development methodology 