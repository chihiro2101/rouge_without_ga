the sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update ( ) operation the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified the observer pattern can cause memory leaks , known as the lapsed listener problem , because in a basic implementation , it requires both explicit registration and explicit deregistration , as in the dispose pattern , because the subject holds strong references to the observers , keeping them alive typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) this type of implementation is considered '' tightly coupled '' , forcing both the observers and the subject to be aware of each other and have access to their internal parts , creating possible issues of scalability , speed , message recovery and maintenance ( also called event or notification loss ) , the lack of flexibility in conditional dispersion , and possible hindrance to desired security measures in some ( non-polling ) implementations of the publish-subscribe pattern ( aka the pub-sub pattern ) , this is solved by creating a dedicated '' message queue '' server ( and sometimes an extra '' message handler '' object ) as an extra stage between the observer and the object being observed , thus decoupling the components in these cases , the message queue server is accessed by the observers with the observer pattern , '' subscribing to certain messages '' knowing only about the expected message ( or not , in some cases ) , while knowing nothing about the message sender itself ; the sender also may know nothing about the observers comparison between different observer pattern implementations moshe bindler , 2015 ( github ) differences between pub/sub and observer pattern the observer pattern by adi osmani ( safari books online ) in early implementations of multi-window operating systems like os/2 and windows , the terms '' publish-subscribe pattern '' and '' event driven software development '' were used as a synonym for the observer pattern the windows programming experience charles petzold , nov 10 , 1992 , pc magazine ( google books ) the observer pattern , as described in the gof book , is a very basic concept and does not address removing interest in changes to the observed '' subject '' or special logic to be done by the observed '' subject '' before or after notifying the observers when a string is supplied from system.in , the method notifyobservers is then called , in order to notify all observers of the event 's occurrence , in the form of an invocation of their 'update ' methods 