in the case where there is no valid proof certificate , however , the input is not in the language , and no prover , however malicious it is , can convince the verifier otherwise , because any proof certificate will be rejected although np may be viewed as using interaction , it was n't until 1985 that the concept of computation through interaction was conceived ( in the context of complexity theory ) by two independent groups of researchers also , instead of requiring that the verifier always accept valid certificates and reject invalid certificates , it is more lenient : completeness : if the string is in the language , the prover must be able to give a certificate such that the verifier will accept with probability at least 2/3 ( depending on the verifier 's random choices ) soundness : if the string is not in the language , no prover , however malicious , will be able to convince the verifier to accept the string with probability exceeding 1/3 in arthur–merlin protocols , babai defined a similar class amf ( n ) which allowed f ( n ) rounds , but he put one extra condition on the machine : the verifier must show the prover all the random bits it uses in its computation the result is that the verifier can not '' hide '' anything from the prover , because the prover is powerful enough to simulate everything the verifier does if it knows what random bits it used the essential problem with public coins is that if the prover wishes to maliciously convince the verifier to accept a string which is not in the language , it seems like the verifier might be able to thwart its plans if it can hide its internal state from it showed , perhaps surprisingly , that the verifier 's ability to hide coin flips from the prover does it little good after all , in that an arthur–merlin public coin protocol with only two more rounds can recognize all the same languages to demonstrate the power of these classes , consider the graph isomorphism problem , the problem of determining whether it is possible to permute the vertices of one graph so that it is identical to another graph it turns out that the complement of the graph isomorphism problem , a co-np problem not known to be in np , has an am algorithm and the best way to see it is via a private coins algorithm not only can interactive proof systems solve problems not believed to be in np , but under assumptions about the existence of one-way functions , a prover can convince the verifier of the solution without ever giving the verifier information about the solution at first it seems impossible that the verifier could be convinced that there is a solution when the verifier has not seen a certificate , but such proofs , known as zero-knowledge proofs are in fact believed to exist for all problems in np and are valuable in cryptography one goal of ip 's designers was to create the most powerful possible interactive proof system , and at first it seems like it can not be made more powerful without making the verifier more powerful and so impractical just as it 's easier to tell if a criminal is lying if he and his partner are interrogated in separate rooms , it 's considerably easier to detect a malicious prover trying to trick the verifier into accepting a string not in the language if there is another prover it can double-check with in fact , this is so helpful that babai , fortnow , and lund were able to show that mip nexptime , the class of all problems solvable by a nondeterministic machine in exponential time , a very large class moreover , a mip protocol can recognize all languages in ip in only a constant number of rounds , and if a third prover is added , it can recognize all languages in nexptime in a constant number of rounds , showing again its power over ip a very useful interactive proof system is pcp ( f ( n ) , g ( n ) ) , which is a restriction of ma where arthur can only use f ( n ) random bits and can only examine g ( n ) bits of the proof certificate sent by merlin ( essentially using random access ) 