state diagrams are used to give an abstract description of the behavior of a system image : directed.svg 125px thumb a directed graph a classic form of state diagram for a finite automaton ( fa ) is a directed graph with the following elements ( q , σ , z , δ , q 0 , f ) : taylor booth ( 1967 ) sequential machines and automata theory , john wiley and sons , new york this is written mathematically as δ : q × σ → q , so δ ( the transition function ) in the definition of the fa is given by both the pair of vertices connected by an edge and the symbol on an edge in a diagram representing this fa item δ ( q , a ) p in the definition of the fa means that from the state named q under input symbol a , the transition to the state p occurs in this machine in the diagram representing this fa , this is represented by an edge labeled by a pointing from the vertex labeled by q to the vertex labeled by p mcclusky , introduction to the theory of switching circuits , mcgraw-hill , 1965 the start state is not shown and must be inferred from the text the diagram type allows the modeling of superstates , orthogonal regions , and activities as part of a state this can lead to a very large number of nodes and transitions between nodes for all but the simplest of systems ( state and transition explosion ) the current state of each cross-functional state machine in the statechart defines the state of the system the harel statechart is equivalent to a state diagram but it improves the readability of the resulting diagram so it is not a state , but when applied to the program 's state , it results in a transition to another state if no variables exist , then the state consists only of the program counter , which keeps track of where in the program we are during execution ( what is the next command to be applied ) in the previous case , the program would be in the same state , because the whole state is just the program counter , so if the program counterpoints to the same position ( next command ) it suffices to specify that we are in the same state however , if the state includes variables , then if those change value , we can be at the same program location with different variable values , meaning in a different state in the program 's state space although the do loop executes the same increment command iteratively , so the program graph executes a cycle , in its state space is not a cycle , but a line this results from the state being the program location ( here cycling ) combined with the counter value , which is strictly increasing ( until the overflow ) , so different states are visited in sequence , until the overflow after the overflow the counter becomes 0 again , so the initial state is revisited in the state space , closing a cycle in the state space ( assuming the counter was initialized to 0 ) the door state machine shown at the top of this article , for example , is not in a more advanced stage when it is in the '' closed '' state , compared to being in the '' opened '' state ; it simply reacts differently to the open/close events a state in a state machine is an efficient way of specifying a particular behavior , rather than a stage of processing this only makes sense if the system is allowed to be in multiple states at once , which implies that an individual state only describes a condition or other partial aspect of the overall , global state 