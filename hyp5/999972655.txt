in the context of program correctness , static analysis can discover vulnerabilities during the development phase of the program so , in the context of program optimization , there are two main strategies to handle computationally undecidable analysis : an optimizer that is expected to complete in a relatively short amount of time , such as the optimizer in an optimizing compiler , may use a truncated version of an analysis that is guaranteed to complete in a finite amount of time , and guaranteed to only find correct optimizations a third-party optimization tool may be implemented in such a way as to never produce an incorrect optimization , but also so that it can , in some situations , continue running indefinitely until it finds one ( which may never happen ) in this case , the developer using the tool would have to stop the tool and avoid running the tool on that piece of code again ( or possibly modify the code to avoid tripping up the tool ) model checking refers to strict , formal , and automated ways to check if a model ( which in this context means a formal model of a piece of code , though in other contexts it can be a model of a piece of hardware ) complies with a given specification dynamic analysis can use runtime knowledge of the program to increase the precision of the analysis , while also providing runtime protection , but it can only analyze a single execution of the problem and might degrade the program ’ s performance due to the runtime checks even if no security requirements are specified , additional security testing should be performed to ensure that an attacker can ’ t tamper with the software and steal information , disrupt the software ’ s normal operations , or use it as a pivot to attack its users program monitoring records and logs different kinds of information about the program such as resource usage , events , and interactions , so that it can be reviewed to find or pinpoint causes of abnormal behavior for a given subset of a program ’ s behavior , program slicing consists of reducing the program to the minimum form that still produces the selected behavior 