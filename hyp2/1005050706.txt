dht research was originally motivated , in part , by peer-to-peer ( p2p ) systems such as freenet , gnutella , bittorrent and napster , which took advantage of resources distributed across the internet to provide a single useful application napster , the first large-scale p2p content delivery system , required a central index server : each node , upon joining , would send a list of locally held files to the server , which would perform searches and refer the queries to the nodes that held the results freenet is fully distributed , but employs a heuristic key-based routing in which each file is associated with a key , and files with similar keys tend to cluster on a similar set of nodes distributed hash tables use a more structured key-based routing in order to attain both the decentralization of freenet and gnutella , and the efficiency and guaranteed results of napster one drawback is that , like freenet , dhts only directly support exact-match search , rather than keyword search , although freenet 's routing algorithm can be generalized to any key type where a closeness operation can be defined a key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly , o ( log n ) of the n participants ( see below ) – so that only a limited amount of work needs to be done for each change in membership finally , dhts must deal with more traditional distributed systems issues such as load balancing , data integrity , and performance ( in particular , ensuring that operations such as routing and data storage or retrieval complete quickly ) to index a file with given and in the dht , the sha-1 hash of is generated , producing a 160-bit key , and a message is sent to any node participating in the dht any other client can then retrieve the contents of the file by again hashing to produce and asking any dht node to find the data associated with with a message both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent ids , and leaves all other nodes unaffected since any change in ownership typically corresponds to bandwidth-intensive movement of objects stored in the dht from one node to another , minimizing such reorganization is required to efficiently support high rates of churn ( node arrival and failure ) consistent hashing employs a function \delta ( k_1 , k_2 ) that defines an abstract notion of the distance between the keys k_1 and k_2 , which is unrelated to geographical distance or network latency for example , the chord dht uses consistent hashing , which treats nodes as points on a circle , and \delta ( k_1 , k_2 ) is the distance traveling clockwise around the circle from k_1 to k_2 if i_1 and i_2 are two adjacent ids , with a shorter clockwise distance from i_1 to i_2 , then the node with id i_2 owns all the keys that fall between i_1 and i_2 in rendezvous hashing , also called highest random weight ( hrw ) hashing , all clients use the same hash function h ( ) ( chosen ahead of time ) to associate a key to one of the n available servers each client has the same list of identifiers the most common choice , o ( \log n ) degree/route length , is not optimal in terms of degree/route length tradeoff , but such topologies typically allow more flexibility in choice of neighbors aside from routing , there exist many algorithms that exploit the structure of the overlay network for sending a message to all nodes , or a subset of nodes , in a dht two systems that are based on this approach are structella , which implements flooding and random walks on a pastry overlay , and dq-dht , which implements a dynamic querying search algorithm over a chord network in the real world the key could be a hash of a file 's content rather than a hash of a file 's name to provide content-addressable storage , so that renaming of the file does not prevent users from finding it in the simplest case , is just a random number that is directly used as key ( so in a 160-bit dht will be a 160-bit number , usually randomly chosen ) some advanced dhts like kademlia perform iterative lookups through the dht first in order to select a set of suitable nodes and send messages only to those nodes , thus drastically reducing useless traffic , since published messages are only sent to nodes that seem suitable for storing the key ; and iterative lookups cover just a small set of nodes rather than the entire dht , reducing useless forwarding in such dhts , forwarding of messages may only occur as part of a self-healing algorithm : if a target node receives a message , but believes that is out of its handled range and a closer node ( in terms of dht keyspace ) is known , the message is forwarded to that node btdigg : bittorrent dht search engine codeen : web caching coral content distribution network freenet : a censorship-resistant anonymous network glusterfs : a distributed file system used for storage virtualization gnunet : freenet-like distribution network including a dht implementation i2p : an open-source anonymous peer-to-peer network i2p : serverless secure anonymous email ipfs : a content-addressable , peer-to-peer hypermedia distribution protocol jxta : open-source p2p platform oracle coherence : an in-memory data grid built on top of a java dht implementation perfect dark : a peer-to-peer file-sharing application from japan retroshare : a friend-to-friend network retroshare faq retrieved december 2011 jami : a privacy-preserving voice , video and chat communication platform , based on a kademlia-like dht tox : an instant messaging system intended to function as a skype replacement twister : a microblogging peer-to-peer platform yacy : a distributed search engine 