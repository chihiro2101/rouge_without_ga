as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) axiomatic semantics , in which the meaning of the system is expressed in terms of preconditions and postconditions which are true before and after the system performs a task , respectively daniel jackson and jeannette wing , '' lightweight formal methods '' , ieee computer , april 1996 vinu george and rayford vaughn , '' application of lightweight formal methods in requirement engineering '' , crosstalk : the journal of defense software engineering , january 2003 they contend that the expressiveness of the languages involved , as well as the complexity of the systems being modelled , make full formalization a difficult and expensive task examples of this lightweight approach to formal methods include the alloy object modelling notation , daniel jackson , '' alloy : a lightweight object modelling notation '' , acm transactions on software engineering and methodology ( tosem ) , volume 11 , issue 2 ( april 2002 ) , pp larsen , '' a lightweight approach to formal methods '' , in proceedings of the international workshop on current trends in applied formal methods , boppard , germany , springer-verlag , october 1998 this formal description can be used to guide further development activities ( see following sections ) ; additionally , it can be used to verify that the requirements for the system being developed have been completely and accurately specified , or formalising system requirements by expressing them in a formal language with a precise and unambiguously defined syntax and semantics for example : if the formal specification is in operational semantics , the observed behavior of the concrete system can be compared with the behavior of the specification ( which itself should be executable or simulatable ) if the formal specification is in axiomatic semantics , the preconditions and postconditions of the specification may become assertions in the executable code formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) sometimes , the motivation for proving the correctness of a system is not the obvious need for reassurance of the correctness of the system , but a desire to understand the system better automated techniques fall into three general categories : automated theorem proving , in which a system attempts to produce a formal proof from scratch , given a description of the system , a set of logical axioms , and a set of inference rules the training required to use such systems is also less than that required to produce good mathematical proofs by hand , making the techniques accessible to a wider variety of practitioners there is also the problem of '' verifying the verifier '' ; if the program which aids in the verification is itself unproven , there may be reason to doubt the soundness of the produced results formal methods are applied in different areas of hardware and software , including routers , ethernet switches , routing protocols , security applications , and operating system microkernels such as sel4 there are several other projects of nasa in which formal methods are applied , such as next generation air transportation system , unmanned aircraft system integration in national airspace system , gheorghe , a airborne coordinated conflict resolution and detection , b-method with atelier b , is used to develop safety automatisms for the various subways installed throughout the world by alstom and siemens , and also for common criteria certification and the development of system models by atmel and stmicroelectronics formal verification has been frequently used in hardware by most of the well-known hardware vendors , such as ibm , intel , and amd in software development , formal methods are mathematical approaches to solving software ( and hardware ) problems at the requirements , specification , and design levels for sequential software , examples of formal methods include the b-method , the specification languages used in automated theorem proving , raise , and the z notation for concurrent software and systems , petri nets , process algebra , and finite state machines ( which are based on automata theory - see also virtual finite state machine or event driven finite state machine ) allow executable software specification and can be used to build up and validate application behaviour another approach to formal methods in software development is to write a specification in some form of logic—usually a variation of first-order logic ( fol ) —and then to directly execute the logic as though it were a program a feature of systems that support bidirectional english-logic mapping and direct execution of the logic is that they can be made to explain their results , in english , at the business or scientific level abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language 