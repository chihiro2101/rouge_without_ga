because of the power and expressivity of clos , as well as the historical availability of tinyclos ( a simplified portable clos implementation written by gregor kiczales for use with scheme ) , clos-like mop-based object systems have become the de facto norm in most lisp dialect implementations , as well as finding their way into some other languages ' oop facilities : cos , the c object system cos , the c object system dylan dynace , a ( largely ) clos implementation in c dynace object oriented extension to c eieio for emacs lisp the mop defines a standard interface to the underpinnings of the clos implementation , treating classes , slot-descriptions , generic-functions and methods themselves as instances of metaclasses , and allows the definition of new metaclasses and the modification of all clos behavior in the design patterns in dynamic languages slides , peter norvig presents his findings that 16 out of 23 design patterns taken from various textbooks are either '' invisible or simpler '' in dylan or common lisp than in c++ outside of the ansi common lisp standard , there is a widely implemented extension to clos called the metaobject protocol ( mop ) the flexibility of the clos mop prefigures aspect-oriented programming , which was later developed by some of the same engineers , such as gregor kiczales gauche , scheme with clos goops in gnu guile ilos in islisp meroon , an object system in scheme sagittarius , a scheme with clos scmobj , for scheme sos for mit scheme stklos , a scheme with clos swindle in racket coops in chicken scheme vclos for skill vclos , clos for skill tiny clos , developed by gregor kiczales miller , understanding clos : the common lisp object system , 1991 , digital press , andreas paepcke , object-oriented programming : the clos perspective , 1993 , the mit press a generic function is an object which is callable like a function and which associates a collection of methods with a shared name and argument structure , each specialized for different arguments fundamentals of clos by nick levine provides a step-by-step exposure to the implementation of oo concepts in clos , and how to utilize them flavors ( and its successor new flavors ) was the object system on the mit lisp machine clos supports changing class definitions on-the-fly ( even when instances of the class in question already exist ) as well as changing the class membership of a given instance through the change-class operator for example , ; declare the common argument structure prototype ( defgeneric f ( x y ) ) ; define an implementation for ( f integer t ) , where t matches all types ( defmethod f ( ( x integer ) y ) 1 ) ( f 1 2.0 ) > 1 ; define an implementation for ( f integer real ) ( defmethod f ( ( x integer ) ( y real ) ) 2 ) ( f 1 2.0 ) > 2 ; dispatch changed at runtime like the oo systems in most dynamic languages , clos does not enforce encapsulation dispatch in clos is also different from most oo languages : given a list of arguments , a list of applicable methods is determined when the default order in which methods are executed in multiple inheritance is not correct , the programmer may resolve the diamond problem by specifying the order of method combinations large parts of the lisp machine operating systems and many applications for it use flavors or new flavors sonya keene , object-oriented programming in common lisp : a programmer 's guide to clos , 1988 , addison-wesley '' a history and description of clos '' , by jim veitch 