for instance , a sql statement like select from city could be inserted as text within c source code , and during compiler it would be converted into a custom format that directly called a function within a library that would pass the statement into the sql system another key problem to the embedded sql concept was that the sql code could only be changed in the program 's source code , so that even small changes to the query required considerable programmer effort to modify the sql market referred to this as static sql , versus dynamic sql which could be changed at any time , like the command-line interfaces that shipped with almost all sql systems , or a programming interface that left the sql as plain text until it was called instead , the data was accessed directly by the program – a programming library in the case of large mainframe systems , or a command line interface or interactive forms system in the case of dbase and similar applications those programs may be given a way to access this data , often through libraries , but it would not work with any other database engine , or even different databases in the same engine by the mid-1980s the rapid improvement in microcomputers , and especially the introduction of the graphical user interface and data-rich application programs like lotus 1-2-3 led to an increasing interest in using personal computers as the client-side platform of choice in client-server computing for this model to work , a data access standard was a requirement – in the mainframe field it was highly likely that all of the computers in a shop were from one vendor and clients were computer terminals talking directly to them , but in the micro field there was no such standardization and any client might access any server using any networking system some of these were mainframe related , designed to allow programs running on those machines to translate between the variety of sql 's and provide a single common interface which could then be called by other mainframe or microcomputer programs blueprint , developed for 1-2-3 , supported a variety of data sources , including sql/ds , db2 , focus and a variety of similar mainframe systems , as well as microcomputer systems like dbase and the early microsoft/ashton-tate efforts that would eventually develop into microsoft sql server around the same time , an industry team including members from sybase ( tom haggin ) , tandem computers ( jim gray & rao yendluri ) and microsoft ( kyle g ) were working on a standardized dynamic sql concept db-library was aided by an industry-wide move from library systems that were tightly linked to a specific language , to library systems that were provided by the operating system and required the languages on that platform to conform to its standards in 1988 several vendors , mostly from the unix and database communities , formed the sql access group ( sag ) in an effort to produce a single basic standard for the sql language at the first meeting there was considerable debate over whether or not the effort should work solely on the sql language itself , or attempt a wider standardization which included a dynamic sql language-embedding system as well , what they called a call level interface ( cli ) while attending the meeting with an early draft of what was then still known as ms data access , kyle geiger of microsoft invited jeff balboni and larry barnes of digital equipment corporation ( dec ) to join the sqlc meetings as well in the end , sqlc won the votes and became the draft standard , but only after large portions of the api were removed – the standards document was trimmed from 120 pages to 50 during this time iso/iec 9075-3 – information technology – database languages – sql – part 3 : call-level interface ( sql/cli ) the sag itself was taken over by the x/open group in 1996 , and , over time , became part of the open group 's common application environment the commands in the api were split into groups ; the core group was identical to the cli , the level 1 extensions were commands that would be easy to implement in drivers , while level 2 commands contained the more advanced features like cursors jet combined three primary subsystems ; an isam-based database engine ( also named jet , confusingly ) , a c-based interface allowing applications to access that data , and a selection of driver dynamic-link libraries ( dll ) that allowed the same c interface to redirect input and output to other isam-based databases , like paradox and xbase some of this was unavoidable due to the path that the calls took through the jet-based stack ; odbc calls to sql databases were first converted from simba technologies 's sql dialect to jet 's internal c-based format , then passed to a driver for conversion back into sql calls for the database '' our history '' , simba technologies circa 1993 , openlink software shipped one of the first independently developed third-party odbc drivers , for the progress dbms , and soon followed with their udbc ( a cross-platform api equivalent of odbc and the sag/cli ) sdk and associated drivers for progress , sybase , oracle , and other dbms , for use on unix-like os ( aix , hp-ux , solaris , linux , etc the two systems remain similar , and many applications can be ported from odbc to cli with few or no changes however , by then microsoft had changed focus to their ole db concept ( recently reinstated ) , which provided direct access to a wider variety of data sources from address books to text files this was propelled by two changes within the market , the introduction of graphical user interfaces ( guis ) like gnome that provided a need to access these sources in non-text form , and the emergence of open software database systems like postgresql and mysql , initially under unix the later adoption of odbc by apple for using the standard unix-side iodbc package mac os x 10.2 ( jaguar ) ( which openlink software had been independently providing for mac os x 10.0 and even mac os 9 since 2001 ) further cemented odbc as the standard for cross-platform data access it is not uncommon to find odbc drivers for database engines that are meant to be embedded , like sqlite , as a way to allow existing tools to act as front-ends to these engines for testing and debugging werner , christian ( 2018 ) '' sqlite odbc driver '' , 2018-02-24 however , the rise of thin client computing using html as an intermediate format has reduced the need for odbc odbc is based on the device driver model , where the driver encapsulates the logic needed to convert a standard set of commands and functions into the specific calls required by the underlying system for instance , a printer driver presents a standard set of printing commands , the api , to applications using the printing system finally , another set of commands , mostly used internally , is used to convert data from the dbms 's internal formats to a set of standardized odbc formats , which are based on the c language formats odbc drivers exist for most dbmss , including oracle , postgresql , mysql , microsoft sql server ( but not for the sql server compact ) , sybase ase , sap hana and db2 for instance , the same mysql driver can be used to connect to any mysql server , but the connection information to connect to a local private server is different from the information needed to connect to an internet-hosted public server 